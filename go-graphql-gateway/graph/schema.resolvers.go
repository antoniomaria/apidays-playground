package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"graphql-gateway/graph/model"
	"sync"
)

// In-memory seat map for demonstration purposes
var (
	seatMap   = make(map[string]*model.SeatStatus)
	seatMapMu sync.Mutex
)

// UpdateSeatStatus is the resolver for the updateSeatStatus field.
func (r *mutationResolver) UpdateSeatStatus(ctx context.Context, rowNumber int32, seatLetter *string, occupied bool) (*bool, error) {
	if seatLetter == nil {
		return nil, fmt.Errorf("seatLetter cannot be nil")
	}
	key := fmt.Sprintf("%d-%s", rowNumber, *seatLetter)
	seatMapMu.Lock()
	defer seatMapMu.Unlock()
	seatMap[key] = &model.SeatStatus{
		RowNumber:  rowNumber,
		SeatLetter: *seatLetter,
		Occupied:   occupied,
	}
	result := true
	return &result, nil
}

// Ping is the resolver for the ping field.
func (r *queryResolver) Ping(ctx context.Context) (*string, error) {
	msg := "pong"
	return &msg, nil
}

// SeatStatus is the resolver for the seatStatus field.
func (r *queryResolver) SeatStatus(ctx context.Context, rowNumber int32, seatLetter string) (*model.SeatStatus, error) {
	key := fmt.Sprintf("%d-%s", rowNumber, seatLetter)
	seatMapMu.Lock()
	defer seatMapMu.Unlock()
	if seat, ok := seatMap[key]; ok {
		return seat, nil
	}
	// If not found, return a default unoccupied seat
	return &model.SeatStatus{
		RowNumber:  rowNumber,
		SeatLetter: seatLetter,
		Occupied:   false,
	}, nil
}

// SeatStatusUpdated is the resolver for the seatStatusUpdated field.
func (r *subscriptionResolver) SeatStatusUpdated(ctx context.Context) (<-chan *model.SeatStatus, error) {
	// For demonstration, this will just send a dummy update and close the channel.
	ch := make(chan *model.SeatStatus, 1)
	go func() {
		defer close(ch)
		ch <- &model.SeatStatus{
			RowNumber:  1,
			SeatLetter: "A",
			Occupied:   true,
		}
	}()
	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
